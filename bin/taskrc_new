#!/bin/bash
# taskrc_new: create a new taskrc in $taskrc_dir using template content


taskrc_dir=${taskrc_dir:-$PWD}

function plain_new {
    cat << EOF
# taskrc for $(basename $PWD)
# vim: filetype=sh :

# If someone does a raw "source taskrc", we ensure that \$taskrc_dir gets defined anyway
[[ -z \$taskrc_dir && -f taskrc ]] && export taskrc_dir=\$PWD

function use_local_histfile {
    #Help use_local_histfile <true*|false>: sets HISTFILE to be local to taskrc_dir (false to disable)
    if [[ -z \$1 ]] || [[ \$1 == true ]]; then
        HISTFILE=\$taskrc_dir/.bash_history
        history -r
    else
        HISTFILE=\$HOME/.bash_history
        history -r
    fi
}

# Use taskrc -h for help on built-in taskrc functions.
# To provide help for definitions in this file, add #Help tags, e.g.:
# function my_func {
    #Help: my_func is my first and only function...
# }
EOF

}

function markdown_new {

    cat << EOF2
## taskrc.md for $(basename $PWD)

\`\`\`bash
#  function vscode_sh_init {
       #Help (this runs when vscode starts a terminal)
#      echo -n
# }

function use_local_histfile {
    #Help use_local_histfile <true*|false>: sets HISTFILE to be local to taskrc_dir (false to disable)
    if [[ -z \$1 ]] || [[ \$1 == true ]]; then
        HISTFILE=\$taskrc_dir/.bash_history
        history -r
    else
        HISTFILE=\$HOME/.bash_history
        history -r
    fi
}
\`\`\`
EOF2

}


if [[ -z $sourceMe ]]; then
    cd ${taskrc_dir} || errExit "Can't cd to $taskrc_dir"
    read -n 1 -p  "Create new taskrc: [p]lain or [m]arkdown notebook?: "
    case $REPLY in
        [pP])
            plain_new > taskrc
            ;;
        [mM])
            markdown_new > taskrc.md
            ;;
        *)
            exit 1
            ;;
    esac
fi
true

